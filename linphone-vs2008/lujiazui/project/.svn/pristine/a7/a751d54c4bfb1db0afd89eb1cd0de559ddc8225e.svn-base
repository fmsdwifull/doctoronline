#include "common.h"
#include <string>

extern SipInfo  usrAuth; //用户信息
extern LinphoneCore *the_core;

bool ReadUserConfig()
{

   QSettings *configIniRead = new QSettings("userinfo.ini", QSettings::IniFormat);  
   //将读取到的ini文件保存在QString中，先取值，然后通过toString()函数转换成QString类型   
   QString usrStr = configIniRead->value("/sipuser/usr").toString();  
   strcpy(usrAuth.usrname,usrStr.toStdString().c_str());
  
   QString pwdStr = configIniRead->value("/sipuser/pwd").toString(); 
   strcpy(usrAuth.password,pwdStr.toStdString().c_str());
   
   QString sipIPStr = configIniRead->value("/sipuser/sipIP").toString(); 
   strcpy(usrAuth.sipip,sipIPStr.toStdString().c_str());

   QString serverIPStr = configIniRead->value("/sipuser/serverIP").toString(); 
   strcpy(usrAuth.serverip,serverIPStr.toStdString().c_str());

   //打印得到的结果   
   qDebug()<<"sipIPStr" << usrAuth.usrname;  
   qDebug() <<"serverIPStr"<< serverIPStr;  
   //读入入完成后删除指针   
   delete configIniRead;  

   return true;
}


bool RegisterSip()
{
	char identity[128];
	ReadUserConfig();
	
	//先退出当前注册
	linphone_core_clear_proxy_config(the_core);
	
	//获取注册信息
	//QString username,password,server,szidentity;

	//username.Format(_T("%s"),usrAuth.usrname);
	//password.Format(_T("%s"),usrAuth.password);
	//server.Format(_T("%s"),usrAuth.sipip);
	//if (username.IsEmpty() || password.IsEmpty() || server.IsEmpty())
	//{
	//	return -1;
	//}
	if((strlen(usrAuth.usrname)==0)||(strlen(usrAuth.password)==0)||(strlen(usrAuth.sipip)==0))
		return false;

	//构建注册格式
	//strcpy(szidentity,"sip:%s@%s");
	//strcat(szidentity,usrAuth.usrname);
	//strcat(szidentity,usrAuth.);
	sprintf(identity,"sip:%s@%s",usrAuth.usrname,usrAuth.sipip);

	//szidentity.Format(_T("sip:%s@%s"),username.GetString(),server.GetString());
	//AfxMessageBox(szidentity);

    //这里宽字符转char型，麻烦死了，
    //USES_CONVERSION;
	//const char *identity = (LPSTR)(LPCTSTR)szidentity;
	//const char *secret = (LPSTR)(LPCTSTR)password;
	//const char *host = (LPSTR)(LPCTSTR)server;



	//检查是否已经注册，如果没有注册则注册
	LinphoneProxyConfig* proxyCfg=NULL;	

	//LinphoneProxyConfig* proxyCfg=new LinphoneProxyConfig;	
	linphone_core_get_default_proxy(the_core,&proxyCfg);
	if (proxyCfg!=NULL)
	{
		if (linphone_proxy_config_is_registered(proxyCfg))
		{
			return false;
		}else
		{
			linphone_core_clear_proxy_config(the_core);
		}
		
	}
	//应该是写配置信息
	proxyCfg = linphone_proxy_config_new();

	// add username password
	LinphoneAddress *from = linphone_address_new(identity);
	LinphoneAuthInfo *info;
	if (from !=0){
		info=linphone_auth_info_new(linphone_address_get_username(from),NULL,usrAuth.password,NULL,NULL);
		linphone_core_add_auth_info(the_core,info);
	}
	linphone_address_destroy(from);

	// configure proxy entries
	linphone_proxy_config_set_identity(proxyCfg,identity);
	linphone_proxy_config_set_server_addr(proxyCfg,usrAuth.sipip);
	linphone_proxy_config_enable_register(proxyCfg,true);
	linphone_proxy_config_set_dial_escape_plus(proxyCfg,TRUE);
	linphone_core_add_proxy_config(the_core,proxyCfg);

	//set to default proxy
	linphone_core_set_default_proxy(the_core,proxyCfg);
	return true;
}